

  let hand = ["C13","C8","D8","H1","S1","H13","H1"];
  scoreHand(hand);



  function scoreHand(hand) {

    let x = convertHand(hand);
    let suite = x.suite;
    let val   = x.val;

    let idx = 0;
    let pairs = [];
    let three_of_a_kind = [];
    let four_of_a_kind = [];
    let straights = [];
    let full_house = [];
    

    //
    // identify pairs
    //
    idx = 1;
    while (idx < 14) {
      let x = isTwo(suite, val, idx);
      if (x == 0) {
	idx = 14;
      } else {
	pairs.push(x);
	idx = x+1;
      }
    } 
 

    //
    // identify triples
    //
    idx = 1;
    while (idx < 14) {
      let x = isThree(suite, val, idx);
      if (x == 0) {
	idx = 14;
      } else {
	three_of_a_kind.push(x);
	idx = x+1;
      }
    }  


    //
    // identify quintuples
    //
    idx = 1;
    while (idx < 14) {
      let x = isFour(suite, val, idx);
      if (x == 0) {
	idx = 14;
      } else {
	four_of_a_kind.push(x);
	idx = x+1;
      }
    }  


    //
    // identify straights
    //
    idx = 1;
    while (idx < 10) {
      let x = isStraight(idx);
      if (x == 0) {
	idx = 11;
      } else {
	straights.push(x);
	idx = x+1;
      }
    }

    //
    // remove triples and pairs that are four-of-a-kind
    //
    for (let i = 0; i < four_of_a_kind.length; i++) {

      for( var z = 0; z < three_of_a_kind.length; z++){ 
        if ( three_of_a_kind[z] === four_of_a_kind[i]) {
          three_of_a_kind.splice(z, 1);
	}
      }

      for( var z = 0; z < pairs.length; z++){ 
        if ( pairs[z] === four_of_a_kind[i]) {
          pairs.splice(z, 1);
	}
      }

    }


    //
    // remove pairs that are also threes
    //
    for (let i = 0; i < three_of_a_kind.length; i++) {
      for( var z = 0; z < pairs.length; z++){ 
        if ( pairs[z] === three_of_a_kind[i]) {
          pairs.splice(z, 1);
	}
      }
    }


console.log("PAIRS: " + pairs);
console.log("TRIPLES: " + three_of_a_kind);
console.log("QUADS: " + four_of_a_kind);
console.log("STRAIGHTS: " + straights);

    //
    // now ready to identify highest hand
    //
    // royal flush
    // straight flush
    // four-of-a-kind		x
    // full-house
    // flush
    // straight			x
    // three-of-a-kind		x
    // two-pair
    // pair				x
    // high card
    //
    let cards_to_score = [];
    let hand_description = "";
    let highest_card = "";


    //
    // ROYAL FLUSH
    //
    if (straights.includes(10)) {
      if (isFlush(suite, val) != "") {
	let x = isFlush(suite, val);
	if (
	  isCardSuite(suite, val, 10, x) == 1 && 
	  isCardSuite(suite, val, 11, x) == 1 && 
	  isCardSuite(suite, val, 12, x) == 1 && 
	  isCardSuite(suite, val, 13, x) == 1 && 
	  isCardSuite(suite, val, 1,  x) == 1
	) {
	  cards_to_score.push("10"+x); 
	  cards_to_score.push("11"+x); 
	  cards_to_score.push("12"+x); 
	  cards_to_score.push("13"+x); 
	  cards_to_score.push("1"+x); 
	  hand_description = "royal flush";
	  highest_card = "13"+x;
	  return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };
	}
      }  
    }
   
 
    //
    // STRAIGHT FLUSH
    //
    if (straights.length > 0) {

      if (isFlush(suite, val) != "") {
  	let x = isFlush(suite, val);

        for (let i = straights.length-1; i >= 0; i--) {
  	  if (
	    isCardSuite(suite, val, straights[i],    x) == 1 && 
	    isCardSuite(suite, val, straights[i]+1,  x) == 1 && 
	    isCardSuite(suite, val, straights[i]+2,  x) == 1 && 
	    isCardSuite(suite, val, straights[i]+3,  x) == 1 && 
	    isCardSuite(suite, val, straights[i]+4,  x) == 1
	  ) {
	    cards_to_score.push((straights[i])+x); 
	    cards_to_score.push((straights[i]+1)+x); 
	    cards_to_score.push((straights[i]+2)+x); 
	    cards_to_score.push((straights[i]+3)+x); 
	    cards_to_score.push((straights[i]+4)+x); 
	    hand_description = "straight flush";
	    highest_card = (straights[i]+4)+x;
	    return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };
	  }
	}

      }  
    }
    
    //
    // FOUR OF A KIND
    //
    if (four_of_a_kind.length > 0) {

      if (four_of_a_kind.contains(1)) {
        cards_to_score = ["C1","D1","H1","S1"];
        highest_card = returnHighestCard(suite, val, cards_to_score);
        cards_to_score.push(highest_card);
        hand_description = "four-of-a-kind";
        return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };
      }

      cards_to_score = [
	"C"+(four_of_a_kind[four_of_a_kind.length-1]),
	"D"+(four_of_a_kind[four_of_a_kind.length-1]),
	"H"+(four_of_a_kind[four_of_a_kind.length-1]),
	"S"+(four_of_a_kind[four_of_a_kind.length-1])
      ]
      highest_card = returnHighestCard(suite, val, cards_to_score);
      cards_to_score.push(highest_card);
      return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };

    }
    


 
    //
    // FULL HOUSE
    //
    if (three_of_a_kind.length > 0 && pairs.length > 0) {

      let highest_suite = "C";

      for (let i = 0; i < val.length; i++) {
	if (val[i] == three_of_a_kind[three_of_a_kind.length-1]) {
	  if (isHigherScuite(suite[i], highest_suite) {
	    highest_suite = suite[i];
          }
	  cards_to_score.push(suite[i] + val[i]);
	}
      }
      highest_card = highest_suite + three_of_a_kind[three_of_a_kind.length-1];

      for (let i = 0; i < val.length; i++) {
	if (val[i] == pair[pair.length-1]) {
	  cards_to_score.push(suite[i] + val[i]);
	}
      }

      hand_description = "full house";
      return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };

      }  
    }





    //
    // FLUSH
    //
/*
    if (three_of_a_kind.length > 0 && pairs.length > 0) {

      let highest_suite = "C";

      for (let i = 0; i < val.length; i++) {
        if (val[i] == three_of_a_kind[three_of_a_kind.length-1]) {
          if (isHigherScuite(suite[i], highest_suite) {
            highest_suite = suite[i];
          }
          cards_to_score.push(suite[i] + val[i]);
        }
      }
      highest_card = highest_suite + three_of_a_kind[three_of_a_kind.length-1];

      for (let i = 0; i < val.length; i++) {
        if (val[i] == pair[pair.length-1]) {
          cards_to_score.push(suite[i] + val[i]);
        }
      }

      hand_description = "full house";
      return { cards_to_score : cards_to_score , hand_description : hand_description , highest_card : highest_card };

      }
    }
*/


  }




  function convertHand(hand) {

    let x = {};
        x.suite = [];
        x.val = [];

    for (let i = 0; i < hand.length; i++) {
      x.suite.push(hand[i][0]);
      x.val.push(hand[i].substring(1));
    }

    return x;

  }



  function isHigherSuite(current, new) {
    if (current === "S") { return 0; }
    if (new == "S") { return 1; }
    if (current === "H") { return 0; }
    if (new == "H") { return 1; }
    if (current === "D") { return 0; }
    if (new == "D") { return 1; }
    if (current === "C") { return 0; }
    if (new == "C") { return 1; }
  }

  function returnHighestCard(suite, val, noval, less_than=14) {

    let highest_card = 0;
    let highest_suite = "";
    let highest_idx = 0;

    for (let i = 0; i < val.length; i++) {

      if (noval.includes(val[i])) {
      } else {

        if (highest_card == 1) { return 1; }
        if (val[i] > highest_card && val[i] < less_than) {
	  if (isHigherSuite(suite[i], highest_suite)) {
            highest_idx = i;
  	    highest_card = val[i];
  	    highest_suite = suite[i];
	  } else {
	  }
        }
        if (val[i] == 1 && less_than == 14) {
	  if (isHigherSuite(suite[i], highest_suite)) {
            highest_idx = i;
  	    highest_card = val[i];
  	    highest_suite = suite[i];
	  }
        }
      }
    }
    return highest_card;
  }



  function isFlush(suite, val) {

    let total_clubs = 0;    
    let total_spades = 0;    
    let total_hearts = 0;    
    let total_diamonds = 0;    

console.log("SUITE LENGTH: " + suite.length);

    for (let i = 0; i < suite.length; i++) {
      if (suite[i] == "C") {
	total_clubs++;
      }
      if (suite[i] == "D") {
	total_diamonds++;
      }
      if (suite[i] == "H") {
	total_hearts++;
      }
      if (suite[i] == "S") {
	total_spades++;
      }
    }

    if (total_clubs >= 5) { return "C"; }
    if (total_spades >= 5) { return "S"; }
    if (total_hearts >= 5) { return "H"; }
    if (total_diamonds >= 5) { return "D"; }

    return "";

  }



  function isFour(suite, val, low=1) {

    for (let i = (low-1); i < 13; i++) {
      let total = 0;
      for (let z = 0; z < val.length; z++) {
	if (val[z] == (i+1)) {
	  total++;
	  if (total == 4) {
	    return (i+1);
	  }
	}
      }
    }

    return 0;

  }




  function isThree(suite, val, low=1) {

    for (let i = (low-1); i < 13; i++) {
      let total = 0;
      for (let z = 0; z < val.length; z++) {
	if (val[z] == (i+1)) {
	  total++;
	  if (total == 3) {
	    return (i+1);
	  }
	}
      }
    }

    return 0;

  }



  function isTwo(suite, val, low=1) {

    for (let i = (low-1); i < 13; i++) {
      let total = 0;
      for (let z = 0; z < val.length; z++) {
	if (val[z] == (i+1)) {
	  total++;
	  if (total == 2) {
	    return (i+1);
	  }
	}
      }
    }

    return 0;

  }




  


  function isStraight(low=1) {

    for (let i = (low-1); i < 10; i++) {

      //
      // catch royal straight
      //
      if (i == 9) {

	if (
	  val.includes(13) &&
	  val.includes(12) &&
	  val.includes(11) &&
	  val.includes(10) &&
	  val.includes(1)
        ) { 
	  return 10;
        }
	return 0;
      }

      if (
	val.includes((i+1)) &&
        val.includes((i+2)) &&
        val.includes((i+3)) &&
        val.includes((i+4)) &&
        val.includes((i+5))
      ) {
	return (i+1);
      }

    }

    return 0;

  }


  function isCardSuite(suite, val, card, suite) {

    for (let i = 0; i < val; i++) {
      if (val[i] == card) {
	if (suite[i] == suite) {
	  return 1;
	}
      }
    }

    return 0;

  }

